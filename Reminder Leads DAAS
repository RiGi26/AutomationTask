import os
from datetime import datetime
import pandas as pd
import numpy as np

# setting
pd.set_option("display.max_columns", None)
current_date = datetime.now().strftime("%Y%m%d")
output_dir = f"D:\\Daily MOXA\\Data Reminder DaaS"
file = "D:\\Daily MOXA\\DAAS\\Rekap DAAS Februari 2023.xlsx"

print(f"\n🚀 DaaS DATA PROCESSING STARTED")
print(f"📅 Date: {datetime.now().strftime('%d %B %Y')}")
print(f"📂 Input File: {file}")
print(f"📂 Output Directory: {output_dir}")
print(f"{'=' * 80}")

# Load data
print(f"\n📊 LOADING DATA...")
try:
    recap_data = pd.read_excel(file)
    print(f"   ✅ Data loaded successfully!")
    print(f"   📋 Total Records: {len(recap_data):,}")
    print(f"   📋 Total Columns: {len(recap_data.columns)}")
except Exception as e:
    print(f"   ❌ Error loading data: {e}")
    exit()

print(f"\n🔍 APPLYING FILTERS...")
# filtering
print(f"   🎯 Filter 1: Records with missing 'Update Status Date' but existing 'Dispatch Date'")
filter_feedback = recap_data[
    recap_data["Update Status Date"].isna() & recap_data["Dispatch Date"].notna()
    ]
print(f"   📊 After Filter 1: {len(filter_feedback):,} records")

print(f"   🎯 Filter 2: Dispatch Date between 2024/01/01 and 2025/06/30")
fds = filter_feedback[
    (filter_feedback["Dispatch Date"] >= pd.to_datetime("2024/01/01"))
    & (filter_feedback["Dispatch Date"] <= pd.to_datetime("2025/06/30"))
    ]
print(f"   📊 After Filter 2: {len(fds):,} records")

# Column selection
print(f"\n📋 SELECTING REQUIRED COLUMNS...")
column_to_include = [
    "id",
    "Nama",
    "Gender",
    "Alamat",
    "Kelurahan",
    "Kecamatan",
    "Kota/Kabupaten",
    "Propinsi",
    "No HP",
    "No Hp-2",
    "Sales Date",
    "Varian Motor",
    "Main Dealer",
    "Assign Dealer Code (5 DIGIT)",
    "Propensity",
    "Pekerjaan",
    "Pendidikan",
    "Pengeluaran",
    "Agama",
    "Tanggal Lahir",
    "Frame No Terakhir",
    "Jenis Penjualan",
    "Sales ID",
    "Nama Leasing Sebelumnya",
    "Nama salesman",
    "Source Leads",
    "Platform Data",
    "Dealer Sebelumnya (Jika Ada)",
    "Remarks/Keterangan",
    "Rekomendasi DP/Angsuran (Tenure)",
    "Varian motor yang diinginkan",
    "Warna varian motor",
    "E-MAIL"
]

print(f"   📊 Selected {len(column_to_include)} columns")
final_data = fds[column_to_include].copy()

# Data preprocessing
print(f"\n🔧 DATA PREPROCESSING...")
print(f"   🔢 Formatting phone numbers...")
final_data["No HP"] = (
    final_data["No HP"]
    .astype("str")
    .apply(lambda x: "0" + x if not x.startswith("0") else x)
)
print(f"   ✅ Phone numbers formatted!")

# Save master file
print(f"\n💾 SAVING MASTER FILE...")
output_path = os.path.join(output_dir, f"Reminder Data Leads Master DaaS.xlsx")
try:
    final_data.to_excel(output_path, index=False)
    print(f"   ✅ Master file saved: {output_path}")
except Exception as e:
    print(f"   ❌ Error saving master file: {e}")

# Get unique dealers
unique_values = final_data["Main Dealer"].unique()
print(f"\n🏢 MAIN DEALERS FOUND:")
print(f"   📊 Total Unique Main Dealers: {len(unique_values)}")
for i, dealer in enumerate(unique_values, 1):
    dealer_count = len(final_data[final_data["Main Dealer"] == dealer])
    print(f"   {i:2d}. {dealer} ({dealer_count:,} records)")

print(f"\n{'=' * 80}")

# Column mappings
kolom_mpm = {
    "id": "id",
    "Nama": "Nama",
    "No HP": "No HP",
    "Kota/Kabupaten": "Kota/Kabupaten",
    "Kecamatan": "Kecamatan",
    "Alamat": "Alamat",
}

kolom_akhir = [
    "id",
    "Nama",
    "No HP",
    "Kota/Kabupaten",
    "Kode Dealer Refrensi",
    "Alamat",
    "Kelurahan",
    "Kecamatan",
]


def process_data_for_dealer_DaaS(dealer_name, final_data, dealer_num, total_dealers):
    print(f"\n🏢 PROCESSING [{dealer_num}/{total_dealers}]: {dealer_name}")

    if dealer_name in ["PT MPM - MALANG", "PT MPM - SURABAYA"]:
        print(f"   🎯 Special Processing: MPM Dealer")
        df_pindah = final_data[list(kolom_mpm.values())].rename(columns=kolom_mpm).copy()
        df_final = df_pindah.reindex(columns=kolom_akhir, fill_value=np.nan)
        record_count = len(df_final)
    else:
        print(f"   🎯 Standard Processing: Regular Dealer")
        df_final = final_data[final_data["Main Dealer"] == dealer_name].copy()
        record_count = len(df_final)

    print(f"   📊 Records to Process: {record_count:,}")

    if record_count == 0:
        print(f"   ⚠️  WARNING: No records found for this dealer!")
        return

    # Format phone numbers
    print(f"   🔢 Formatting phone numbers...")
    df_final["No HP"] = df_final["No HP"].astype(str).apply(lambda x: "0" + x if not x.startswith("0") else x)

    # Save file
    output_path = os.path.join(output_dir, f"Reminder Data Leads {dealer_name} DaaS.xlsx")
    try:
        write_to_excel(df_final, output_path)
        print(f"   ✅ File created successfully!")
        print(f"   📁 Location: {output_path}")
    except Exception as e:
        print(f"   ❌ Error creating file: {e}")


def write_to_excel(dataframe, path):
    print(f"   💾 Writing Excel file with formatting...")
    dataframe = dataframe.fillna('')

    with pd.ExcelWriter(path, engine="xlsxwriter") as writer:
        dataframe.to_excel(writer, sheet_name="Sheet1", index=False)
        workbook = writer.book
        worksheet = writer.sheets["Sheet1"]
        border_format = workbook.add_format({"border": 1})
        date_format = workbook.add_format({'num_format': 'dd-mm-yyyy', 'border': 1})

        # Apply formatting
        for row_num in range(len(dataframe) + 1):
            for col_num, col in enumerate(dataframe.columns):
                if row_num == 0:
                    value = col  # Header
                    worksheet.write(row_num, col_num, value, border_format)
                else:
                    value = dataframe.iloc[row_num - 1, col_num]

                    if col == 'Dispatch Date':
                        worksheet.write(row_num, col_num, value, date_format)
                    else:
                        worksheet.write(row_num, col_num, value, border_format)

        # Auto-adjust column widths
        for idx, col in enumerate(dataframe.columns):
            max_len = max(dataframe[col].astype(str).map(len).max(), len(col)) + 2
            worksheet.set_column(idx, idx, max_len)

    print(f"   ✅ Excel formatting applied!")


# Process each dealer
print(f"\n🔄 PROCESSING INDIVIDUAL DEALER FILES...")
print(f"{'=' * 80}")

successful_files = 0
failed_files = 0

for i, unique in enumerate(unique_values, 1):
    try:
        process_data_for_dealer_DaaS(unique, final_data, i, len(unique_values))
        successful_files += 1
    except Exception as e:
        print(f"   ❌ FAILED to process {unique}: {e}")
        failed_files += 1

# Final summary
print(f"\n🎉 DaaS DATA PROCESSING COMPLETED!")
print(f"{'=' * 80}")
print(f"📊 FINAL SUMMARY:")
print(f"   📋 Total Records Processed: {len(final_data):,}")
print(f"   🏢 Total Main Dealers: {len(unique_values)}")
print(f"   ✅ Successful Files: {successful_files}")
print(f"   ❌ Failed Files: {failed_files}")
print(f"   📁 Master File: Reminder Data Leads Master DaaS.xlsx")
print(f"   📂 Output Directory: {output_dir}")
print(f"{'=' * 80}")

if failed_files > 0:
    print(f"⚠️  Some files failed to process. Please check the error messages above.")
else:
    print(f"🎊 All files processed successfully!")
